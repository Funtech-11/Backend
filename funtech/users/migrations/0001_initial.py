# Generated by Django 4.1.7 on 2024-04-10 07:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=30, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('mobile_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('employment', models.CharField(max_length=100, verbose_name='Место работы')),
                ('position', models.CharField(max_length=100, verbose_name='Должность')),
                ('experience', models.CharField(choices=[('NO_EXP', 'Нет опыта'), ('ONE_YEAR', 'От 1 года'), ('THREE_YEARS', 'От 3 лет'), ('FIVE_YEARS', 'От 5 лет')], max_length=20, null=True, verbose_name='Опыт работы')),
                ('preferred_format', models.CharField(choices=[('OFFLINE', 'Оффлайн'), ('ONLINE', 'Онлайн')], max_length=255, verbose_name='Предпочитаемый формат')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'ordering': ('last_name',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст соглашения')),
                ('link', models.CharField(max_length=100, unique=True, verbose_name='Ссылка')),
            ],
            options={
                'verbose_name': 'соглашение',
                'verbose_name_plural': 'соглашения',
            },
        ),
        migrations.CreateModel(
            name='Expertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'направление',
                'verbose_name_plural': 'направления',
            },
        ),
        migrations.CreateModel(
            name='Stack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('expertise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.expertise')),
            ],
            options={
                'verbose_name': 'стек',
                'verbose_name_plural': 'стек',
            },
        ),
        migrations.CreateModel(
            name='UserExpertise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expertise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.expertise')),
                ('stack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.stack')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'направление и стек пользователя',
                'verbose_name_plural': 'направления и стек пользователя',
            },
        ),
        migrations.CreateModel(
            name='UserAgreement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agreement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.agreement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'соглашение пользователя',
                'verbose_name_plural': 'соглашения пользователя',
            },
        ),
    ]
